from datetime import timedelta
from os import path
from pathlib import Path
from airflow import DAG
from airflow.operators.bash import BashOperator
from airflow.operators.python import PythonOperator
import datetime as dt
import pandas as pd
import json

# Membuat proses penginputan file.
BASE_DIR = Path(__file__).resolve().parent
DATA_PATH_Json = '/workspaces/Setup-airflow-on-virtual-environtment/airflow-project/DataSiswa2.csv'
DATA_PATH_CSV = '/workspaces/Setup-airflow-on-virtual-environtment/airflow-project/Hasil_json/DataSiswa.json'

# Membuat def atau definisi fungsi untuk membaca file. 
def csvToJson():
    df=pd.read_csv(DATA_PATH_Json)
    for i,rw in df.iterrows():
        print({'No.' : rw['No.'], 'NISN' : rw['NISN'], 'Nama' : rw['Nama'], 'Kelamin' : rw['Kelamin'], 'Tingkat' : rw['Tingkat']})
        df.to_json('/workspaces/Setup-airflow-on-virtual-environtment/airflow-project/Hasil_json/DataSiswa.json', indent= 1, orient='records')

def JsonTocsv():
    df=pd.read_json(DATA_PATH_CSV, encoding='utf-8')
    df.to_csv('/workspaces/Setup-airflow-on-virtual-environtment/airflow-project/Hasil_csv/DataSiswa3.csv', encoding='utf-8', index=False)

# Menentukan argumen default dari airflow DAG, untuk menentukan parameter umum.
default_dag_args = {
    'owner' : 'Agung',
    'start_date' : dt.datetime(2024, 6, 8, 0, 0),
    'retries' : 0,
    'retry_delay' : timedelta(minutes=5),
    'depends_on_past': False,}

schedule_interval = "30 23 * * *"

# Membuat DAG dan komponen DAG seperti (Nama DAG, Task, & Nama Task).
with DAG('dag_csv_to_js_to_csv',
        default_args = default_dag_args,
        schedule_interval = schedule_interval,

) as dag:

    print_starting = BashOperator(task_id = 'Collect_CSV', bash_command= 'echo Collect_CSV')

    # untuk mengeksekusi callable python dalam DAG.
    csvJson = PythonOperator(task_id = 'ConvertCSVtoJson', python_callable=csvToJson)
    Jsoncsv = PythonOperator(task_id = 'ReformatJson', python_callable=JsonTocsv)

    # untuk membuat peryataan bash menggunakan fungsi python dan tersedia pada airflow.
    start_task = BashOperator(task_id = 'start_task', bash_command = 'echo start', dag = dag)
    finish_task = BashOperator(task_id = 'finish_task', bash_command = 'echo finish', dag = dag)

    # untuk urutan task.
    start_task >> print_starting
    print_starting >> csvJson
    csvJson >> Jsoncsv
    Jsoncsv >> finish_task